#!/usr/bin/env boot

;; vim: set ft=clojure:

(ns-unmap *ns* 'namespace)

(require
  '[boot.file :as file]
  '[clojure.java.io :as io]
  '[clojure.string :as string :refer [join split trimr]])

(def ^:dynamic *doc-ns-sym*)
(def fixme "FIXME: document this")

(defn p            [x]   (format "%s\n\n" x))
(defn hr           [ ]   (p "<hr>"))
(defn code         [x]   (format "`%s`" x))
(defn em           [x]   (format "_%s_" x))
(defn li           [x]   (p (format "* %s")))
(defn h1           [x]   (p (format "# %s" x)))
(defn h3           [x]   (p (format "### %s" x)))
(defn h5           [x]   (p (format "##### %s" x)))
(defn link         [x y] (format "[%s](%s)" x y))
(defn block       ([x]   (p (format "```\n%s\n```" x)))
                  ([x y] (p (format "```%s\n%s\n```" x y))))
(defn filter-vals  [p m] (reduce-kv #(if-not (p %3) %1 (assoc %1 %2 %3)) {} m))

(defn strip-indent [x]
  (let [[head & [z & _ :as tail]] (split (or x fixme) #"\n")
        indent (or (some->> z (re-find #"^ *") count) 0)
        strip  #(try (subs % indent) (catch Throwable _))]
    (->> tail (map strip) (list* head) (join "\n") trimr)))

(defn fmt-link [sym]
  (-> (str "#" sym)
      (.replaceAll "\\*" "")
      (.replaceAll " " "-")
      (.replaceAll "!" "")))

(defn emit-arglists [name arglists]
  (some->> arglists
           (sort-by count)
           (map #(pr-str (list* name %)))
           (join " ")
           (block "clojure")))

(defn emit-var
  [link-path obj {:keys [name doc arglists argspecs file line] :as meta}]
  (let [src-link (format "%s%s#L%d" link-path file line)]
    (str (h3 (link (code name) src-link))
         (emit-arglists name arglists)
         (block (strip-indent doc))
         (hr))))

(defn emit-vars [sections]
  (->> sections (map :vars) (reduce merge) vals (keep :md)))

(defn emit-ns [{:keys [name doc]}]
  (remove nil? [(when name (h1 name)) (when doc (p (strip-indent doc)))]))

(defn emit-toc [xs]
  (->> xs (mapcat (fn [{:keys [title vars]}]
                    (-> (->> (map (fn [[x _]] (link (code x) (fmt-link x))) vars)
                             (interpose " ")
                             (cons (when title (li title)))
                             (remove nil?))
                        (concat ["\n\n"]))))))

(defn sections [x]
  (->> (assoc (:doc/toc x) nil {})
       (into (sorted-map))
       (reduce (fn [xs [k v]]
                 (->> (:vars x)
                      (filter-vals #(= k (:doc/section %)))
                      (into (sorted-map))
                      (assoc v :vars)
                      (conj xs)))
               [])))

(defn ns-docs [link-path ns-sym]
  (let [n (the-ns ns-sym)
        e #(let [m (meta %2)
                 v (var-get (ns-resolve n %1))]
             (assoc m :md (emit-var link-path v m)))
        m (assoc (meta n)
                 :name ns-sym
                 :vars (->> (ns-publics n)
                            (reduce-kv #(assoc %1 %2 (e %2 %3)) {})))
        s (sections m)]
    (->> (emit-vars s)
         (concat (list (hr)))
         (concat (emit-toc s))
         (concat (emit-ns m))
         (apply str))))

(defn section* [title & syms]
  (let [id (gensym)
        ns *doc-ns-sym*
        n  (find-ns ns)]
    (alter-meta! n update-in [:doc/toc] assoc id {:title title})
    (doseq [s syms]
      (alter-meta! (ns-resolve n s) assoc :doc/section id))))

(defn generate-docs [ns src-path ns-doc]
  (let [ns  *doc-ns-sym*
        n   (find-ns ns)
        out (str "doc/" ns ".md")]
    (println (format "Writing %s..." out))
    (alter-meta! n assoc :doc ns-doc)
    (spit out (-> (.getParent (io/file out))
                  (file/relative-to src-path)
                  (str "/")
                  (ns-docs ns)))))

(defmacro section [title & syms]
  `(~'section* ~title ~@(map (partial list 'quote) syms)))

(defmacro namespace [ns ns-doc src-path & sections]
  `(binding [~'*doc-ns-sym* '~ns]
     (alter-meta! (find-ns '~ns) assoc :doc/toc nil)
     (do ~@sections)
     (~'generate-docs '~ns ~src-path ~ns-doc)))

(defn -main [& args]

  (namespace
    boot.util
    "Namespace containing various utility functions and macros to make
    life easier in Boot scripts."
    (format "../%s/boot/pod/src/" boot.core/*boot-version*))

  (namespace
    boot.pod
    "Namespace containing various utility functions and macros to make
    life easier in Boot scripts."
    (format "../%s/boot/pod/src/" boot.core/*boot-version*))

  (namespace
    boot.core
    "The Boot core namespace, containing most of Boot's public API."
    (format "../%s/boot/core/src/" boot.core/*boot-version*)

    (section
      "Boot Settings (read-only)"
      *app-version*
      *boot-script*
      *boot-version*
      *boot-opts*
      *warnings*
      new-build-at
      last-file-change
      bootignore)

    (section
      "Configuration Helpers"
      load-data-readers!
      configure-repositories!)

    (section
      "Boot Environment"
      get-env set-env! merge-env!
      get-sys-env set-sys-env!
      pre-env! post-env!)

    (section
      "Define Tasks"
      deftask
      cleanup
      reset-build!
      reset-fileset
      with-pre-wrap
      with-pass-thru
      with-post-wrap)

    (section
      "Manipulate Task Options"
      task-options!
      replace-task!
      disable-task!)

    (section
      "REPL Integration"
      boot
      rebuild!
      launch-nrepl)

    (section
      "Create Temp Directories"
      tmp-dir!
      cache-dir!)

    (section
      "TmpFile API"
      tmp-path
      tmp-dir
      tmp-file
      tmp-time)

    (section
      "Query Fileset For TmpFiles"
      tmp-get
      user-files
      input-files
      output-files)

    (section
      "Filter Sequences Of TmpFiles"
      file-filter
      by-ext by-name by-path by-re
      not-by-ext not-by-name not-by-path not-by-re)

    (section
      "Other Fileset Queries"
      ls
      fileset-namespaces
      input-fileset
      output-fileset
      user-dirs
      input-dirs
      output-dirs)

    (section
      "Manipulate Fileset"
      new-fileset
      commit!
      rm mv cp
      add-meta
      add-asset add-cached-asset
      add-source add-cached-source
      add-resource add-cached-resource
      mv-asset
      mv-source
      mv-resource)

    (section
      "Fileset Diffs"
      fileset-diff
      fileset-added
      fileset-removed
      fileset-changed)

    (section
      "Misc. Helpers"
      gpg-decrypt
      json-generate json-parse
      yaml-generate yaml-parse
      touch
      git-files
      empty-dir!
      sync!
      watch-dirs)

    (section
      "Deprecated / Internal"
      tmppath
      tmpdir
      tmpget
      tmpfile
      tmptime
      temp-dir!
      fileset-reduce
      init!)))

